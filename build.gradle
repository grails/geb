buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
    }
}

version projectVersion
group "org.grails.plugins"

apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'org.grails.grails-plugin'
apply plugin: 'org.grails.internal.grails-plugin-publish'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    documentation.extendsFrom compileClasspath
}

dependencies {
    compileOnly "org.grails:grails-core:$grailsVersion"

    // used transitively by the generated tests
    api "org.gebish:geb-spock:$gebSpock"
    api "org.grails:grails-testing-support:$testingSupportVersion"
    api "org.grails:grails-datastore-gorm:$datastoreVersion"

    documentation "org.apache.groovy:groovy:$groovyVersion"
    documentation "org.apache.groovy:groovy-ant:$groovyVersion"
    documentation "org.apache.groovy:groovy-templates:$groovyVersion"
    documentation "com.github.javaparser:javaparser-core:$javaParserCoreVersion"
}

findMainClass.enabled = false

grailsPublish {
    userOrg = 'grails'
    githubSlug = 'grails/geb'
    license {
        name = 'Apache-2.0'
    }
    title = "Grails Geb Plugin"
    desc = "Provides Integration with Geb for Functional Testing"
    developers = [graemerocher: "Graeme Rocher", puneetbehl: "Puneet Behl"]
}

tasks.withType(Groovydoc) {
    destinationDir = new File(buildDir, 'docs/api')
    docTitle = "Grails Geb Plugin ${version}"
    classpath = configurations.documentation
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

test {
    testLogging {
        events "passed", "skipped", "failed"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
    }
}

bootJar.enabled = false
bootRun.enabled = false
bootTestRun.enabled = false