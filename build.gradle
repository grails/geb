buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
    }
}

version projectVersion
group "org.grails.plugins"

apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'org.grails.grails-plugin'
apply plugin: 'org.grails.internal.grails-plugin-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    documentation.extendsFrom runtimeClasspath
}

dependencies {
    api "org.grails:grails-core:$grailsVersion"
    api "org.gebish:geb-spock:$gebSpock", {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    documentation "org.codehaus.groovy:groovy:$groovyVersion"
    documentation "org.codehaus.groovy:groovy-ant:$groovyVersion"
    documentation "org.codehaus.groovy:groovy-templates:$groovyVersion"
    documentation "com.github.javaparser:javaparser-core:3.15.14"
}

findMainClass.enabled = false

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}


grailsPublish {
    userOrg = 'grails'
    githubSlug = 'grails/geb'
    license {
        name = 'Apache-2.0'
    }
    title = "Grails Geb Plugin"
    desc = "Provides Integration with Geb for Functional Testing"
    developers = [graemerocher: "Graeme Rocher", puneetbehl: "Puneet Behl"]
}

tasks.withType(Groovydoc) {
    source project.files('src/main/groovy')
    destinationDir = new File(buildDir, 'docs/api')
    docTitle = "Grails Geb Plugin ${version}"
    classpath = configurations.documentation
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

test {
    testLogging {
        events "passed", "skipped", "failed"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
    }
}

bootJar.enabled = false
